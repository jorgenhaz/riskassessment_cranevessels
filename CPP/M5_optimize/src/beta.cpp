#include "beta.h"

Eigen::MatrixXd beta(Eigen::VectorXd kwargs) {
	double x = kwargs(0);
	double y = kwargs(1);
	double z = kwargs(2);
	double phi = kwargs(3);
	double theta = kwargs(4);
	double psi = kwargs(5);
	double q1_p = kwargs(6);
	double q2_p = kwargs(7);
	double u = kwargs(8);
	double v = kwargs(9);
	double w = kwargs(10);
	double p = kwargs(11);
	double q = kwargs(12);
	double r = kwargs(13);
	double q1_pdot = kwargs(14);
	double q2_pdot = kwargs(15);
	double tau_xn = kwargs(16);
	double tau_yn = kwargs(17);
	double tau_zn = kwargs(18);
	double tau_phi = kwargs(19);
	double tau_theta = kwargs(20);
	double tau_psi = kwargs(21);
	double tau_q1p = kwargs(22);
	double tau_q2p = kwargs(23);
	double m_fp_stb = kwargs(24);
	double m_fp_ps = kwargs(25);
	double m_aft_stb = kwargs(26);
	double m_aft_ps = kwargs(27);
	double m_payload = kwargs(28);
	double wire_length = kwargs(29);
	double q1 = kwargs(30);
	double q2 = kwargs(31);
	double q3 = kwargs(32);
	double q4 = kwargs(33);
	Eigen::MatrixXd m(8, 8);
	m(0, 0) = cos(psi)*cos(theta);
	m(0, 1) = sin(phi)*sin(theta)*cos(psi) - sin(psi)*cos(phi);
	m(0, 2) = sin(phi)*sin(psi) + sin(theta)*cos(phi)*cos(psi);
	m(0, 3) = 0;
	m(0, 4) = 0;
	m(0, 5) = 0;
	m(0, 6) = 0;
	m(0, 7) = 0;
	m(1, 0) = sin(psi)*cos(theta);
	m(1, 1) = sin(phi)*sin(psi)*sin(theta) + cos(phi)*cos(psi);
	m(1, 2) = -sin(phi)*cos(psi) + sin(psi)*sin(theta)*cos(phi);
	m(1, 3) = 0;
	m(1, 4) = 0;
	m(1, 5) = 0;
	m(1, 6) = 0;
	m(1, 7) = 0;
	m(2, 0) = -sin(theta);
	m(2, 1) = sin(phi)*cos(theta);
	m(2, 2) = cos(phi)*cos(theta);
	m(2, 3) = 0;
	m(2, 4) = 0;
	m(2, 5) = 0;
	m(2, 6) = 0;
	m(2, 7) = 0;
	m(3, 0) = 0;
	m(3, 1) = 0;
	m(3, 2) = 0;
	m(3, 3) = 1;
	m(3, 4) = sin(phi)*tan(theta);
	m(3, 5) = cos(phi)*tan(theta);
	m(3, 6) = 0;
	m(3, 7) = 0;
	m(4, 0) = 0;
	m(4, 1) = 0;
	m(4, 2) = 0;
	m(4, 3) = 0;
	m(4, 4) = cos(phi);
	m(4, 5) = -sin(phi);
	m(4, 6) = 0;
	m(4, 7) = 0;
	m(5, 0) = 0;
	m(5, 1) = 0;
	m(5, 2) = 0;
	m(5, 3) = 0;
	m(5, 4) = sin(phi)/cos(theta);
	m(5, 5) = cos(phi)/cos(theta);
	m(5, 6) = 0;
	m(5, 7) = 0;
	m(6, 0) = 0;
	m(6, 1) = 0;
	m(6, 2) = 0;
	m(6, 3) = 0;
	m(6, 4) = 0;
	m(6, 5) = 0;
	m(6, 6) = 1;
	m(6, 7) = 0;
	m(7, 0) = 0;
	m(7, 1) = 0;
	m(7, 2) = 0;
	m(7, 3) = 0;
	m(7, 4) = 0;
	m(7, 5) = 0;
	m(7, 6) = 0;
	m(7, 7) = 1;
	return m;
}