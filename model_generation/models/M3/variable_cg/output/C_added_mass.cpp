#include "C_added_mass.h"

Eigen::MatrixXd C_added_mass(Eigen::VectorXd kwargs) {
	double x = kwargs(0);
	double y = kwargs(1);
	double z = kwargs(2);
	double phi = kwargs(3);
	double theta = kwargs(4);
	double psi = kwargs(5);
	double q1 = kwargs(6);
	double q2 = kwargs(7);
	double q3 = kwargs(8);
	double q4 = kwargs(9);
	double q1_p = kwargs(10);
	double q2_p = kwargs(11);
	double u = kwargs(12);
	double v = kwargs(13);
	double w = kwargs(14);
	double p = kwargs(15);
	double q = kwargs(16);
	double r = kwargs(17);
	double q1_dot = kwargs(18);
	double q2_dot = kwargs(19);
	double q3_dot = kwargs(20);
	double q4_dot = kwargs(21);
	double q1_pdot = kwargs(22);
	double q2_pdot = kwargs(23);
	double tau_xn = kwargs(24);
	double tau_yn = kwargs(25);
	double tau_zn = kwargs(26);
	double tau_phi = kwargs(27);
	double tau_theta = kwargs(28);
	double tau_psi = kwargs(29);
	double tau_q1 = kwargs(30);
	double tau_q2 = kwargs(31);
	double tau_q3 = kwargs(32);
	double tau_q4 = kwargs(33);
	double tau_q1p = kwargs(34);
	double tau_q2p = kwargs(35);
	double m_fp_stb = kwargs(36);
	double m_fp_ps = kwargs(37);
	double m_aft_stb = kwargs(38);
	double m_aft_ps = kwargs(39);
	double q1_0 = kwargs(40);
	double q2_0 = kwargs(41);
	double q3_0 = kwargs(42);
	double q4_0 = kwargs(43);
	Eigen::MatrixXd m(12, 12);
	m(0, 0) = 0;
	m(0, 1) = 0;
	m(0, 2) = 0;
	m(0, 3) = 0;
	m(0, 4) = 634000.0*w;
	m(0, 5) = -25700.0*v;
	m(0, 6) = 0;
	m(0, 7) = 0;
	m(0, 8) = 0;
	m(0, 9) = 0;
	m(0, 10) = 0;
	m(0, 11) = 0;
	m(1, 0) = 0;
	m(1, 1) = 0;
	m(1, 2) = 0;
	m(1, 3) = -634000.0*w;
	m(1, 4) = 0;
	m(1, 5) = 14000.0*u;
	m(1, 6) = 0;
	m(1, 7) = 0;
	m(1, 8) = 0;
	m(1, 9) = 0;
	m(1, 10) = 0;
	m(1, 11) = 0;
	m(2, 0) = 0;
	m(2, 1) = 0;
	m(2, 2) = 0;
	m(2, 3) = 25700.0*v;
	m(2, 4) = -14000.0*u;
	m(2, 5) = 0;
	m(2, 6) = 0;
	m(2, 7) = 0;
	m(2, 8) = 0;
	m(2, 9) = 0;
	m(2, 10) = 0;
	m(2, 11) = 0;
	m(3, 0) = 0;
	m(3, 1) = 634000.0*w;
	m(3, 2) = -25700.0*v;
	m(3, 3) = 0;
	m(3, 4) = 3530000.0*r;
	m(3, 5) = -3370000.0*q;
	m(3, 6) = 0;
	m(3, 7) = 0;
	m(3, 8) = 0;
	m(3, 9) = 0;
	m(3, 10) = 0;
	m(3, 11) = 0;
	m(4, 0) = -634000.0*w;
	m(4, 1) = 0;
	m(4, 2) = 14000.0*u;
	m(4, 3) = -3530000.0*r;
	m(4, 4) = 0;
	m(4, 5) = 1150000.0*p;
	m(4, 6) = 0;
	m(4, 7) = 0;
	m(4, 8) = 0;
	m(4, 9) = 0;
	m(4, 10) = 0;
	m(4, 11) = 0;
	m(5, 0) = 25700.0*v;
	m(5, 1) = -14000.0*u;
	m(5, 2) = 0;
	m(5, 3) = 3370000.0*q;
	m(5, 4) = -1150000.0*p;
	m(5, 5) = 0;
	m(5, 6) = 0;
	m(5, 7) = 0;
	m(5, 8) = 0;
	m(5, 9) = 0;
	m(5, 10) = 0;
	m(5, 11) = 0;
	m(6, 0) = 0;
	m(6, 1) = 0;
	m(6, 2) = 0;
	m(6, 3) = 0;
	m(6, 4) = 0;
	m(6, 5) = 0;
	m(6, 6) = 0;
	m(6, 7) = 0;
	m(6, 8) = 0;
	m(6, 9) = 0;
	m(6, 10) = 0;
	m(6, 11) = 0;
	m(7, 0) = 0;
	m(7, 1) = 0;
	m(7, 2) = 0;
	m(7, 3) = 0;
	m(7, 4) = 0;
	m(7, 5) = 0;
	m(7, 6) = 0;
	m(7, 7) = 0;
	m(7, 8) = 0;
	m(7, 9) = 0;
	m(7, 10) = 0;
	m(7, 11) = 0;
	m(8, 0) = 0;
	m(8, 1) = 0;
	m(8, 2) = 0;
	m(8, 3) = 0;
	m(8, 4) = 0;
	m(8, 5) = 0;
	m(8, 6) = 0;
	m(8, 7) = 0;
	m(8, 8) = 0;
	m(8, 9) = 0;
	m(8, 10) = 0;
	m(8, 11) = 0;
	m(9, 0) = 0;
	m(9, 1) = 0;
	m(9, 2) = 0;
	m(9, 3) = 0;
	m(9, 4) = 0;
	m(9, 5) = 0;
	m(9, 6) = 0;
	m(9, 7) = 0;
	m(9, 8) = 0;
	m(9, 9) = 0;
	m(9, 10) = 0;
	m(9, 11) = 0;
	m(10, 0) = 0;
	m(10, 1) = 0;
	m(10, 2) = 0;
	m(10, 3) = 0;
	m(10, 4) = 0;
	m(10, 5) = 0;
	m(10, 6) = 0;
	m(10, 7) = 0;
	m(10, 8) = 0;
	m(10, 9) = 0;
	m(10, 10) = 0;
	m(10, 11) = 0;
	m(11, 0) = 0;
	m(11, 1) = 0;
	m(11, 2) = 0;
	m(11, 3) = 0;
	m(11, 4) = 0;
	m(11, 5) = 0;
	m(11, 6) = 0;
	m(11, 7) = 0;
	m(11, 8) = 0;
	m(11, 9) = 0;
	m(11, 10) = 0;
	m(11, 11) = 0;
	return m;
}